from __future__ import annotations

import argparse
from pathlib import Path

import pandas as pd


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="Plot IMU CSV generated by decoder.py")
    p.add_argument("csv", type=Path, help="input CSV file (from decoder)")
    p.add_argument("--cols", type=str, default="",
                   help="comma-separated columns to plot (default: accel and gyro if present)")
    p.add_argument("--x", type=str, default="",
                   help="x-axis column (default: t_sec if present else n)")
    p.add_argument("--start", type=float, default=None,
                   help="crop start (by x-axis value if numeric)")
    p.add_argument("--end", type=float, default=None,
                   help="crop end (by x-axis value if numeric)")
    p.add_argument("--every", type=int, default=1,
                   help="plot every Nth sample for speed (default: 1 = all)")
    p.add_argument("--rolling", type=int, default=0,
                   help="optional rolling mean window (samples)")
    p.add_argument("--save", type=Path, default=None,
                   help="save figure to this path (PNG, PDF, etc.)")
    p.add_argument("--no-show", action="store_true",
                   help="do not open an interactive window (useful with --save)")
    return p.parse_args()


def ensure_matplotlib(headless: bool):
    # Import matplotlib lazily; choose Agg backend when not showing
    if headless:
        import matplotlib
        matplotlib.use("Agg")
    import matplotlib.pyplot as plt
    return plt


def pick_default_cols(df: pd.DataFrame) -> list[str]:
    acc = [c for c in ("ax_g", "ay_g", "az_g") if c in df.columns]
    gyr = [c for c in ("gx_dps", "gy_dps", "gz_dps") if c in df.columns]
    if acc and gyr:
        return acc + gyr
    return acc or gyr or [c for c in df.columns if c not in {"n", "t_sec"}]


def main():
    args = parse_args()

    df = pd.read_csv(args.csv)
    xcol = args.x or ("t_sec" if "t_sec" in df.columns else "n")
    if xcol not in df.columns:
        raise SystemExit(f"x-axis column '{xcol}' not found in {args.csv}")

    # Select y columns
    if args.cols:
        ycols = [c.strip() for c in args.cols.split(",") if c.strip()]
    else:
        ycols = pick_default_cols(df)
    missing = [c for c in ycols if c not in df.columns]
    if missing:
        raise SystemExit(f"columns not found in CSV: {missing}")

    # Optional crop by x range
    if args.start is not None:
        df = df[df[xcol] >= args.start]
    if args.end is not None:
        df = df[df[xcol] <= args.end]

    # Downsample for quick plotting
    if args.every > 1:
        df = df.iloc[:: args.every, :]

    # Optional rolling mean
    if args.rolling and args.rolling > 1:
        df[ycols] = df[ycols].rolling(window=args.rolling, min_periods=1, center=False).mean()

    headless = bool(args.save) or args.no_show
    plt = ensure_matplotlib(headless=headless)

    # Layout: if both accel and gyro are present and user did not specify cols,
    # try to split into two subplots for readability
    acc_cols = [c for c in ("ax_g", "ay_g", "az_g") if c in ycols]
    gyr_cols = [c for c in ("gx_dps", "gy_dps", "gz_dps") if c in ycols]

    if not args.cols and acc_cols and gyr_cols:
        fig, axes = plt.subplots(2, 1, sharex=True, figsize=(10, 6))
        ax1, ax2 = axes
        for c in acc_cols:
            ax1.plot(df[xcol], df[c], label=c)
        ax1.set_ylabel("acc [g]")
        ax1.grid(True, alpha=0.3)
        ax1.legend(loc="upper right")

        for c in gyr_cols:
            ax2.plot(df[xcol], df[c], label=c)
        ax2.set_ylabel("gyro [dps]")
        ax2.set_xlabel("time [s]" if xcol == "t_sec" else xcol)
        ax2.grid(True, alpha=0.3)
        ax2.legend(loc="upper right")
        fig.suptitle(Path(args.csv).name)
        fig.tight_layout()
    else:
        fig, ax = plt.subplots(figsize=(10, 4))
        for c in ycols:
            ax.plot(df[xcol], df[c], label=c)
        ax.set_xlabel("time [s]" if xcol == "t_sec" else xcol)
        ax.set_ylabel("value")
        ax.grid(True, alpha=0.3)
        ax.legend(loc="upper right")
        fig.suptitle(Path(args.csv).name)
        fig.tight_layout()

    if args.save:
        out = Path(args.save)
        out.parent.mkdir(parents=True, exist_ok=True)
        fig.savefig(out, dpi=150)
        print(f"Saved: {out}")

    if not args.no_show:
        plt.show()


if __name__ == "__main__":
    main()

